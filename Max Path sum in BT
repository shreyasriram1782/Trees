class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def maxPathSum(self, root):
        # Helper function to find the maximum path sum recursively
        def maxPathSumHelper(node):
            nonlocal max_sum
            if not node:
                return 0
            
            # Calculate the maximum path sum for the left and right subtrees
            left_sum = max(0, maxPathSumHelper(node.left))
            right_sum = max(0, maxPathSumHelper(node.right))
            
            # Update the maximum path sum considering the current node
            max_sum = max(max_sum, left_sum + right_sum + node.val)
            
            # Return the maximum sum considering the current node as part of the path
            return max(left_sum, right_sum) + node.val
        
        max_sum = float('-inf')  # Initialize the maximum path sum
        maxPathSumHelper(root)
        return max_sum

# Example usage:
# Constructing a sample binary tree
#        10
#       / \
#      2   10
#     / \    \
#    20  1   -25
#           / \
#          3   4
root = TreeNode(10)
root.left = TreeNode(2)
root.right = TreeNode(10)
root.left.left = TreeNode(20)
root.left.right = TreeNode(1)
root.right.right = TreeNode(-25)
root.right.right.left = TreeNode(3)
root.right.right.right = TreeNode(4)

solution = Solution()
result = solution.maxPathSum(root)
print(result)  # Output: 42 (the maximum path sum is 20 + 2 + 10 + 10)
