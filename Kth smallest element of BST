class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def kth_smallest_bst(root, k):
    def in_order_traversal(node):
        nonlocal count, result

        if node and count < k:
            # Traverse left subtree
            in_order_traversal(node.left)

            # Process current node
            count += 1
            if count == k:
                result = node.value
                return

            # Traverse right subtree
            in_order_traversal(node.right)

    count = 0  # Count of visited nodes
    result = None  # To store the kth smallest element
    in_order_traversal(root)

    return result

# Example usage:
# Construct a sample binary search tree
root = TreeNode(3)
root.left = TreeNode(1)
root.right = TreeNode(4)
root.left.right = TreeNode(2)

# Find the 2nd smallest element
k = 2
result = kth_smallest_bst(root, k)
print(f"The {k}th smallest element is: {result}")
