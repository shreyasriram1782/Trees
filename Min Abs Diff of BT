class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def min_absolute_difference_bst(root):
    """
    Find the minimum absolute difference between any two nodes in a BST.

    Parameters:
    - root: TreeNode
        The root of the Binary Search Tree.

    Returns:
    - int
        The minimum absolute difference.
    """
    def inorder_traversal(node):
        nonlocal prev, min_diff

        if not node:
            return

        inorder_traversal(node.left)

        if prev is not None:
            min_diff = min(min_diff, node.val - prev)

        prev = node.val

        inorder_traversal(node.right)

    prev = None
    min_diff = float('inf')

    inorder_traversal(root)

    return min_diff

# Example usage:
# Constructing a sample BST
#        4
#       / \
#      2   6
#     / \ / \
#    1  3 5  7
bst_root = TreeNode(4)
bst_root.left = TreeNode(2, TreeNode(1), TreeNode(3))
bst_root.right = TreeNode(6, TreeNode(5), TreeNode(7))

# Find the minimum absolute difference
result = min_absolute_difference_bst(bst_root)
print(result)  # Output: 1
