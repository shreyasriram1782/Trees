class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def buildTree(inorder, postorder):
    if not inorder or not postorder:
        return None

    root_val = postorder.pop()
    root = TreeNode(root_val)
    
    # Find the index of root_val in inorder
    root_index_inorder = inorder.index(root_val)
    
    # Recursive calls to build left and right subtrees
    root.right = buildTree(inorder[root_index_inorder + 1:], postorder)
    root.left = buildTree(inorder[:root_index_inorder], postorder)
    
    return root

# Example usage:
inorder = [9, 3, 15, 20, 7]
postorder = [9, 15, 7, 20, 3]

root = buildTree(inorder, postorder)
