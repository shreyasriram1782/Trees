class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def diagonal_traversal(root):
    """
    Perform diagonal traversal of a binary tree.
    
    Parameters:
    - root: TreeNode
        The root of the binary tree.
    
    Returns:
    - List[List[int]]
        A list of lists representing the elements of the tree in diagonal order.
    """
    if not root:
        return []

    result = []
    queue = [root]

    while queue:
        current_diagonal = []
        size = len(queue)

        for i in range(size):
            node = queue.pop(0)
            while node:
                current_diagonal.append(node.val)
                if node.left:
                    queue.append(node.left)
                node = node.right

        result.append(current_diagonal)

    return result

# Example usage:
# Constructing a sample binary tree
#        1
#       / \
#      2   3
#     / \
#    4   5
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

# Perform diagonal traversal
result = diagonal_traversal(root)
print(result)
# Output: [[1, 3], [2, 5], [4]]
