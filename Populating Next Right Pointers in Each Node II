class Node:
    def __init__(self, val=0, left=None, right=None, next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

def connect(root):
    if not root:
        return root

    current_level_start = root

    while current_level_start:
        dummy = Node()  # Dummy node to build the next pointers for the next level
        current = dummy  # Pointer to the current node in the next level

        # Traverse the current level and build the next pointers for the next level
        while current_level_start:
            if current_level_start.left:
                current.next = current_level_start.left
                current = current.next

            if current_level_start.right:
                current.next = current_level_start.right
                current = current.next

            current_level_start = current_level_start.next

        # Move to the leftmost node of the next level
        current_level_start = dummy.next

    return root

# Example usage:
# Constructing a sample binary tree
#        1
#       / \
#      2   3
#     / \   \
#    4   5   6
root = Node(1, Node(2, Node(4), Node(5)), Node(3, None, Node(6)))

# Connect the next pointers
connected_root = connect(root)

# Print the next pointers
def print_next_pointers(node):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")

# Print the next pointers of each level
current_level_start = connected_root
while current_level_start:
    print_next_pointers(current_level_start)
    current_level_start = current_level_start.left
