class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def build_tree(preorder, inorder):
    if not preorder or not inorder:
        return None

    # Pick the first element from preorder as the root
    root_value = preorder[0]
    root = TreeNode(root_value)

    # Find the index of the root in inorder
    root_index_inorder = inorder.index(root_value)

    # Recursively build the left and right subtrees
    root.left = build_tree(preorder[1:1 + root_index_inorder], inorder[:root_index_inorder])
    root.right = build_tree(preorder[1 + root_index_inorder:], inorder[root_index_inorder + 1:])

    return root

# Example usage:
# Given inorder and preorder traversals
inorder = [9, 3, 15, 20, 7]
preorder = [3, 9, 20, 15, 7]

# Build the binary tree
root = build_tree(preorder, inorder)
