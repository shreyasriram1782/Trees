class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def get_minimum_difference(root):
    def inorder_traversal(node):
        nonlocal prev, min_diff
        if node:
            inorder_traversal(node.left)
            if prev is not None:
                min_diff = min(min_diff, node.value - prev)
            prev = node.value
            inorder_traversal(node.right)

    prev = None
    min_diff = float('inf')
    inorder_traversal(root)
    return min_diff

# Example usage:
# Constructing a binary search tree (BST):
#       4
#      / \
#     2   6
#    / \ / \
#   1  3 5  7

bst_root = TreeNode(4)
bst_root.left = TreeNode(2)
bst_root.right = TreeNode(6)
bst_root.left.left = TreeNode(1)
bst_root.left.right = TreeNode(3)
bst_root.right.left = TreeNode(5)
bst_root.right.right = TreeNode(7)

min_diff = get_minimum_difference(bst_root)
print("Minimum Absolute Difference in BST:", min_diff)
